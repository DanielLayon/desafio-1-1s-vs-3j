Use cWebHttpHandler.pkg

Struct stCountries
    String nome
    Integer total
End_Struct

Struct stResponseTopCountries
    Integer iTimeEnlapse
    stCountries[] tCountries
End_Struct

Object oTopCountries is a cWebHttpHandler
    
    Set psPath to "top-countries"
    Set psVerbs to "GET"

    Procedure OnHttpGet String sPath String sAcceptType
        TimeSpan tsTimeEnlapse
        DateTime dtInitialTimer
        Integer iChnl iCount iCountPais iSizePais
        Handle hoJson
        Boolean bSuccess bExists bExistsPais
        stResponseTopCountries tResponse
        stUsers[] tUsers tUsersFiltered
        stCountries[] tPais tPaisOrder
        UChar[] ucData ucFile
        
        Move (CurrentDateTime()) to dtInitialTimer
        
        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
        Move (sPath + "\Uploads\usuarios.json") to sPath
        
        File_Exist sPath bExists
        
        If (bExists) Begin
            //Ler arquivo JSON
            Move (Seq_New_Channel()) to iChnl
            Direct_Input channel iChnl ("binary:" + sPath)
            Read_Block channel iChnl ucFile -1
            Close_Input channel iChnl
            Send Seq_Release_Channel iChnl

            //JSON to DataType
            Get Create (RefClass(cJsonObject)) to hoJson
            Get ParseUtf8 of hoJson ucFile to bSuccess
            
            If (not(bSuccess)) Begin
                Send Destroy of hoJson
                Send SetResponseStatus 500 "JSON not loaded" 2
                Procedure_Return
            End
            
            Get JsonToDataType of hoJson to tUsers
            Send Destroy of hoJson
            
            //Filtrar
            For iCount from 0 to (SizeOfArray(tUsers)-1)
                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
            Loop
            
            For iCount from 0 to (SizeOfArray(tUsersFiltered)-1)
                Move False to bExistsPais
                
                For iCountPais from 0 to (SizeOfArray(tPais)-1)
                    If (tUsersFiltered[iCount].pais = tPais[iCountPais].nome) Begin
                        Move True to bExistsPais
                        Increment tPais[iCountPais].total
                    End
                Loop
                
                If (not(bExistsPais)) Begin
                    Move (SizeOfArray(tPais)) to iSizePais
                    Move tUsersFiltered[iCount].pais to tPais[iSizePais].nome
                    Move 1 to tPais[iSizePais].total
                End
            Loop
            
            
            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
            Move tPais to tResponse.tCountries
            
            //Parse DataType to Json
            Get Create (RefClass(cJsonObject)) to hoJson
            Send DataTypeToJson of hoJson tResponse
            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
            Get StringifyUtf8 of hoJson to ucData
            Send Destroy of hoJson

            Send OutputUChar ucData
        End
        Else Begin
            Send SetResponseStatus 500 "File not exists" 2
        End        
    End_Procedure
    
End_Object
