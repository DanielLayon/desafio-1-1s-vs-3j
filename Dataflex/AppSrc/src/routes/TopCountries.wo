Use cWebHttpHandler.pkg

Struct stCountries
    String name
    Integer total
End_Struct

Struct stResponseTopCountries
    Integer iTimeEnlapse
    stCountries[] tCountries
End_Struct


Object oTopCountries is a cWebHttpHandler
    
    Set psPath to "top-countries"
    Set psVerbs to "GET"
    
    //Aux Functions
    Function f_OrderUsersByCountry stUsers tUser1 stUsers tUser2 Returns Integer
        If (tUser1.pais > tUser2.pais) Function_Return (GT)
        If (tUser1.pais < tUser2.pais) Function_Return (LT)

        Function_Return (EQ)
    End_Function
    
    Function f_ComparisonCountry stCountries tCountry stUsers tUser Returns Integer
        If (tUser.pais < tCountry.name) Function_Return (GT)
        If (tUser.pais > tCountry.name) Function_Return (LT)

        Function_Return (EQ)
    End_Function
    
    Function f_RankingCountries stCountries tCountry1 stCountries tCountry2 Returns Integer
        If (tCountry1.total < tCountry2.total) Function_Return (GT)
        If (tCountry1.total > tCountry2.total) Function_Return (LT)

        Function_Return (EQ)
    End_Function
    
    //Https
    Procedure OnHttpGet String sPath String sAcceptType
        TimeSpan tsTimeEnlapse
        DateTime dtInitialTimer
        Integer iChnl iCount iIndexCountry iSizePais
        Handle hoJson
        Boolean bSuccess bExists bExistsPais
        stResponseTopCountries tResponse
        stUsers[] tUsers tUsersFiltered
        stCountries[] tCountries tCountriesOrder
        UChar[] ucData ucFile
        
        Move (CurrentDateTime()) to dtInitialTimer
        
        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
        Move (sPath + "\Uploads\usuarios.json") to sPath
        
        File_Exist sPath bExists
        
        If (bExists) Begin
            //Ler arquivo JSON
            Move (Seq_New_Channel()) to iChnl
            Direct_Input channel iChnl ("binary:" + sPath)
            Read_Block channel iChnl ucFile -1
            Close_Input channel iChnl
            Send Seq_Release_Channel iChnl

            //JSON to DataType
            Get Create (RefClass(cJsonObject)) to hoJson
            Get ParseUtf8 of hoJson ucFile to bSuccess
            
            If (not(bSuccess)) Begin
                Send Destroy of hoJson
                Send SetResponseStatus 500 "JSON not loaded" 2
                Procedure_Return
            End
            
            Get JsonToDataType of hoJson to tUsers
            Send Destroy of hoJson
            
            //Filtrar
            For iCount from 0 to (SizeOfArray(tUsers)-1)
                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
            Loop
            
//            //Order user to use bynary search on tCountries
//            //OBS: Binary search make the process slowly because of SortArray
//            Move (SortArray(tUsersFiltered, Self, (RefFunc(f_OrderUsersByCountry)))) to tUsersFiltered
            
            //Incrementar ao país | Inserir país
            //Utilizando Binary Search
            For iCount from 0 to (SizeOfArray(tUsersFiltered)-1)
                
                Move (SearchArray(tUsersFiltered[iCount],tCountries,Self, (RefFunc(f_ComparisonCountry)))) to iIndexCountry
                If (iIndexCountry=-1) Begin
                    Move (SizeOfArray(tCountries)) to iSizePais
                    Move tUsersFiltered[iCount].pais to tCountries[iSizePais].name
                    Move 1 to tCountries[iSizePais].total
                End
                Else Begin                    
                    Increment tCountries[iIndexCountry].total
                End                
            Loop
            
            Move (SortArray(tCountries, Self, (RefFunc(f_RankingCountries)))) to tCountries
            
            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
            
            Move tCountries[0] to tResponse.tCountries[0]
            Move tCountries[1] to tResponse.tCountries[1]
            Move tCountries[2] to tResponse.tCountries[2]
            Move tCountries[3] to tResponse.tCountries[3]
            Move tCountries[4] to tResponse.tCountries[4]
            
            //Parse DataType to Json
            Get Create (RefClass(cJsonObject)) to hoJson
            Send DataTypeToJson of hoJson tResponse
            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
            Get StringifyUtf8 of hoJson to ucData
            Send Destroy of hoJson

            Send OutputUChar ucData
        End
        Else Begin
            Send SetResponseStatus 500 "File not exists" 2
        End        
    End_Procedure
    
End_Object

//
//Object oTopCountriesOld is a cWebHttpHandler
//    
//    Set psPath to "top-countries-old"
//    Set psVerbs to "GET"
//    
//    //Aux Functions
//    Function f_OrderUsersByCountry stUsers tUser1 stUsers tUser2 Returns Integer
//        If (tUser1.pais > tUser2.pais) Function_Return (GT)
//        If (tUser1.pais < tUser2.pais) Function_Return (LT)
//
//        Function_Return (EQ)
//    End_Function
//    
//    Function f_RankingCountries stCountries tCountry1 stCountries tCountry2 Returns Integer
//        If (tCountry1.total < tCountry2.total) Function_Return (GT)
//        If (tCountry1.total > tCountry2.total) Function_Return (LT)
//
//        Function_Return (EQ)
//    End_Function
//    
//    Procedure OnHttpGet String sPath String sAcceptType
//        TimeSpan tsTimeEnlapse
//        DateTime dtInitialTimer
//        Integer iChnl iCount iCountCountries iSizePais
//        Handle hoJson
//        Boolean bSuccess bExists bExistsPais
//        stResponseTopCountries tResponse
//        stUsers[] tUsers tUsersFiltered
//        stCountries[] tCountries tCountriesOrder
//        UChar[] ucData ucFile
//        
//        Move (CurrentDateTime()) to dtInitialTimer
//        
//        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
//        Move (sPath + "\Uploads\usuarios.json") to sPath
//        
//        File_Exist sPath bExists
//        
//        If (bExists) Begin
//            //Ler arquivo JSON
//            Move (Seq_New_Channel()) to iChnl
//            Direct_Input channel iChnl ("binary:" + sPath)
//            Read_Block channel iChnl ucFile -1
//            Close_Input channel iChnl
//            Send Seq_Release_Channel iChnl
//
//            //JSON to DataType
//            Get Create (RefClass(cJsonObject)) to hoJson
//            Get ParseUtf8 of hoJson ucFile to bSuccess
//            
//            If (not(bSuccess)) Begin
//                Send Destroy of hoJson
//                Send SetResponseStatus 500 "JSON not loaded" 2
//                Procedure_Return
//            End
//            
//            Get JsonToDataType of hoJson to tUsers
//            Send Destroy of hoJson
//            
//            //Filtrar
//            For iCount from 0 to (SizeOfArray(tUsers)-1)
//                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
//            Loop
//            
//            //Order user to use bynary search on tCountries
//            Move (SortArray(tUsersFiltered, Self, (RefFunc(f_OrderUsersByCountry)))) to tUsersFiltered
//            
//            //Incrementar ao país | Inserir país
//            For iCount from 0 to (SizeOfArray(tUsersFiltered)-1)
//                Move False to bExistsPais
//                
//                For iCountCountries from 0 to (SizeOfArray(tCountries)-1)
//                    If (tUsersFiltered[iCount].pais = tCountries[iCountCountries].name) Begin
//                        Move True to bExistsPais
//                        Increment tCountries[iCountCountries].total
//                    End
//                Loop
//                
//                If (not(bExistsPais)) Begin
//                    Move (SizeOfArray(tCountries)) to iSizePais
//                    Move tUsersFiltered[iCount].pais to tCountries[iSizePais].name
//                    Move 1 to tCountries[iSizePais].total
//                End
//            Loop
//            
//            Move (SortArray(tCountries, Self, (RefFunc(f_RankingCountries)))) to tCountries
//            
//            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
//            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
//            
//            Move tCountries[0] to tResponse.tCountries[0]
//            Move tCountries[1] to tResponse.tCountries[1]
//            Move tCountries[2] to tResponse.tCountries[2]
//            Move tCountries[3] to tResponse.tCountries[3]
//            Move tCountries[4] to tResponse.tCountries[4]
//            
//            //Parse DataType to Json
//            Get Create (RefClass(cJsonObject)) to hoJson
//            Send DataTypeToJson of hoJson tResponse
//            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
//            Get StringifyUtf8 of hoJson to ucData
//            Send Destroy of hoJson
//
//            Send OutputUChar ucData
//        End
//        Else Begin
//            Send SetResponseStatus 500 "File not exists" 2
//        End        
//    End_Procedure
//    
//End_Object
