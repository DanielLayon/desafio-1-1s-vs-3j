Compiling Program: E:\Sistema\Codecon\AppSrc\WebApp.src
Memory Available: 48514351104
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 24.0\Pkg\AllWebAppClasses.x64.pkd)
36017>Use cConnection.pkg
36017>
36017>Struct stLogs
36017>    Date data
36017>    String acao
36017>End_Struct
36017>
36017>Struct stProjects
36017>    String nome
36017>    Boolean concluido
36017>End_Struct
36017>
36017>Struct stTeam
36017>    String nome
36017>    Boolean lider
36017>    stProjects[] projetos
36017>    stProjects[] projetos
36017>End_Struct
36017>
36017>Struct stUsers
36017>    String id
36017>    String nome
36017>    Integer idade
36017>    Integer score
36017>    Boolean ativo
36017>    String pais
36017>    stTeam equipe
36017>    stTeam equipe
36017>    stLogs[] logs
36017>    stLogs[] logs
36017>End_Struct
36017>
36017>Object oApplication is a cApplication
36019>End_Object
36020>
36020>Object oWebApp is a cWebAppBasic
36022>    Use src\routes\Users.wo
Including file: src\routes\Users.wo    (E:\Sistema\Codecon\AppSrc\src\routes\Users.wo)
36022>>>Use cWebHttpMultipartFormDataHandler.pkg
36022>>>
36022>>>Struct stResponseUsers
36022>>>    Integer iTimeEnlapse
36022>>>    String sMessage
36022>>>End_Struct
36022>>>
36022>>>Object oUsers is a cWebHttpMultipartFormdataHandler
36024>>>    
36024>>>    Set psPath to "users"
36025>>>    Set psVerbs to "POST"
36026>>>
36026>>>    Property Integer piOutChannel -1
36028>>>        
36028>>>    Procedure OnHttpPost String sPath String sContentType String sAcceptType Integer iSize
36031>>>        TimeSpan tsTimeEnlapse
36031>>>        DateTime dtInitialTimer
36031>>>        Boolean bSuccess
36031>>>        Handle hoJson
36031>>>        UChar[] ucData
36032>>>        stResponseUsers tResponse
36032>>>        stResponseUsers tResponse
36032>>>        
36032>>>        Move (CurrentDateTime()) to dtInitialTimer
36033>>>        Get ParseMultipartFormData to bSuccess
36034>>>        
36034>>>        If (bSuccess) Begin
36036>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36037>>>            
36037>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36038>>>            Move "Succesfully written file!" to tResponse.sMessage
36039>>>            
36039>>>            Get Create (RefClass(cJsonObject)) to hoJson
36040>>>            Send DataTypeToJson of hoJson tResponse
36041>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36042>>>            Get StringifyUtf8 of hoJson to ucData
36043>>>
36043>>>            
36043>>>            Send OutputUChar ucData
36044>>>        End
36044>>>>
36044>>>    End_Procedure
36045>>>    
36045>>>    Procedure OnFileStart String sFieldName String sFileName String sContentType Boolean  ByRef bAbort
36048>>>        String sPath
36048>>>        Boolean bExists
36048>>>        Integer iChnl
36048>>>        
36048>>>        //  Open a file for writing
36048>>>        If (sFieldName = "file") Begin
36050>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36051>>>            Move (sPath + "\Uploads\usuarios.json") to sPath
36052>>>            
36052>>>            File_Exist sPath bExists
36053>>>            
36053>>>            If (not(bExists)) Begin
36055>>>                Move (Seq_New_Channel()) to iChnl
36056>>>                Direct_Output channel iChnl ("binary:" + sPath)
36058>>>                Set piOutChannel to iChnl
36059>>>            End
36059>>>>
36059>>>            Else Begin
36060>>>                Send SetResponseStatus 500 "File already exists" 4
36061>>>                Move True to bAbort
36062>>>            End
36062>>>>
36062>>>        End     
36062>>>>
36062>>>        Else Begin
36063>>>            Send SetResponseStatus 400 "Invalid Field" 5
36064>>>            Move True to bAbort
36065>>>        End
36065>>>>
36065>>>    End_Procedure
36066>>>
36066>>>    Procedure OnFileChunk String sFieldName UChar[]  ByRef ucData
36069>>>        Integer iChnl
36069>>>        
36069>>>        //  Write the chunks to the opened file
36069>>>        If (sFieldName = "file") Begin
36071>>>            Get piOutChannel to iChnl
36072>>>            If (iChnl >= 0) Begin
36074>>>                Write channel iChnl ucData
36076>>>            End
36076>>>>
36076>>>        End
36076>>>>
36076>>>    End_Procedure
36077>>>    
36077>>>    Procedure OnFileFinished String sFieldName
36080>>>        Integer iChnl
36080>>>        
36080>>>        //  Close when finished
36080>>>        If (sFieldName = "file") Begin
36082>>>            Get piOutChannel to iChnl
36083>>>            If (iChnl >= 0) Begin
36085>>>                Close_Output channel iChnl
36087>>>                Send Seq_Release_Channel iChnl
36088>>>                
36088>>>                Set piOutChannel to -1
36089>>>            End
36089>>>>
36089>>>        End
36089>>>>
36089>>>    End_Procedure
36090>>>End_Object
36091>    Use src\routes\SuperUsers.wo
Including file: src\routes\SuperUsers.wo    (E:\Sistema\Codecon\AppSrc\src\routes\SuperUsers.wo)
36091>>>Use cWebHttpHandler.pkg
36091>>>
36091>>>Struct stResponseSuperusers
36091>>>    Integer iTimeEnlapse
36091>>>    Integer iTotal
36091>>>    stUsers[] tUsers
36091>>>    stUsers[] tUsers
36091>>>End_Struct
36091>>>
36091>>>Object oSuperUsers is a cWebHttpHandler
36093>>>    
36093>>>    Set psPath to "superusers"
36094>>>    Set psVerbs to "GET"
36095>>>
36095>>>    Procedure OnHttpGet String sPath String sAcceptType
36098>>>        TimeSpan tsTimeEnlapse
36098>>>        DateTime dtInitialTimer
36098>>>        Integer iChnl iCount
36098>>>        Handle hoJson
36098>>>        Boolean bSuccess bExists
36098>>>        stResponseSuperusers tResponse
36098>>>        stResponseSuperusers tResponse
36098>>>        stUsers[] tUsers tUsersFiltered
36098>>>        stUsers[] tUsers tUsersFiltered
36100>>>        UChar[] ucData ucFile
36102>>>        
36102>>>        Move (CurrentDateTime()) to dtInitialTimer
36103>>>        
36103>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36104>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36105>>>        
36105>>>        File_Exist sPath bExists
36106>>>        
36106>>>        If (bExists) Begin
36108>>>            //Ler arquivo JSON
36108>>>            Move (Seq_New_Channel()) to iChnl
36109>>>            Direct_Input channel iChnl ("binary:" + sPath)
36111>>>            Read_Block channel iChnl ucFile -1
36113>>>            Close_Input channel iChnl
36115>>>            Send Seq_Release_Channel iChnl
36116>>>
36116>>>            //JSON to DataType
36116>>>            Get Create (RefClass(cJsonObject)) to hoJson
36117>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36118>>>            
36118>>>            If (not(bSuccess)) Begin
36120>>>                Send Destroy of hoJson
36121>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36122>>>                Procedure_Return
36123>>>            End
36123>>>>
36123>>>            
36123>>>            Get JsonToDataType of hoJson to tUsers
36124>>>            Send Destroy of hoJson
36125>>>            
36125>>>            //Filtrar
36125>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36131>>>>
36131>>>                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
36134>>>            Loop
36135>>>>
36135>>>            
36135>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36136>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36137>>>            Move (SizeOfArray(tUsersFiltered)) to tResponse.iTotal
36138>>>            Move tUsersFiltered to tResponse.tUsers
36139>>>            
36139>>>            //Parse DataType to Json
36139>>>            Get Create (RefClass(cJsonObject)) to hoJson
36140>>>            Send DataTypeToJson of hoJson tResponse
36141>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36142>>>            Get StringifyUtf8 of hoJson to ucData
36143>>>            Send Destroy of hoJson
36144>>>
36144>>>            Send OutputUChar ucData
36145>>>        End
36145>>>>
36145>>>        Else Begin
36146>>>            Send SetResponseStatus 500 "File not exists" 2
36147>>>        End        
36147>>>>
36147>>>    End_Procedure
36148>>>    
36148>>>End_Object
36149>    Use src\routes\TopCountries.wo
Including file: src\routes\TopCountries.wo    (E:\Sistema\Codecon\AppSrc\src\routes\TopCountries.wo)
36149>>>Use cWebHttpHandler.pkg
36149>>>
36149>>>Struct stCountries
36149>>>    String name
36149>>>    Integer total
36149>>>End_Struct
36149>>>
36149>>>Struct stResponseTopCountries
36149>>>    Integer iTimeEnlapse
36149>>>    stCountries[] tCountries
36149>>>    stCountries[] tCountries
36149>>>End_Struct
36149>>>
36149>>>
36149>>>Object oTopCountries is a cWebHttpHandler
36151>>>    
36151>>>    Set psPath to "top-countries"
36152>>>    Set psVerbs to "GET"
36153>>>    
36153>>>    //Aux Functions
36153>>>    Function f_OrderUsersByCountry stUsers tUser1 stUsers tUser2 Returns Integer
36156>>>        If (tUser1.pais > tUser2.pais) Function_Return (GT)
36159>>>        If (tUser1.pais < tUser2.pais) Function_Return (LT)
36162>>>
36162>>>        Function_Return (EQ)
36163>>>    End_Function
36164>>>    
36164>>>    Function f_ComparisonCountry stCountries tCountry stUsers tUser Returns Integer
36167>>>        If (tUser.pais < tCountry.name) Function_Return (GT)
36170>>>        If (tUser.pais > tCountry.name) Function_Return (LT)
36173>>>
36173>>>        Function_Return (EQ)
36174>>>    End_Function
36175>>>    
36175>>>    Function f_RankingCountries stCountries tCountry1 stCountries tCountry2 Returns Integer
36178>>>        If (tCountry1.total < tCountry2.total) Function_Return (GT)
36181>>>        If (tCountry1.total > tCountry2.total) Function_Return (LT)
36184>>>
36184>>>        Function_Return (EQ)
36185>>>    End_Function
36186>>>    
36186>>>    //Https
36186>>>    Procedure OnHttpGet String sPath String sAcceptType
36189>>>        TimeSpan tsTimeEnlapse
36189>>>        DateTime dtInitialTimer
36189>>>        Integer iChnl iCount iIndexCountry iSizePais
36189>>>        Handle hoJson
36189>>>        Boolean bSuccess bExists bExistsPais
36189>>>        stResponseTopCountries tResponse
36189>>>        stResponseTopCountries tResponse
36189>>>        stUsers[] tUsers tUsersFiltered
36189>>>        stUsers[] tUsers tUsersFiltered
36191>>>        stCountries[] tCountries tCountriesOrder
36191>>>        stCountries[] tCountries tCountriesOrder
36193>>>        UChar[] ucData ucFile
36195>>>        
36195>>>        Move (CurrentDateTime()) to dtInitialTimer
36196>>>        
36196>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36197>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36198>>>        
36198>>>        File_Exist sPath bExists
36199>>>        
36199>>>        If (bExists) Begin
36201>>>            //Ler arquivo JSON
36201>>>            Move (Seq_New_Channel()) to iChnl
36202>>>            Direct_Input channel iChnl ("binary:" + sPath)
36204>>>            Read_Block channel iChnl ucFile -1
36206>>>            Close_Input channel iChnl
36208>>>            Send Seq_Release_Channel iChnl
36209>>>
36209>>>            //JSON to DataType
36209>>>            Get Create (RefClass(cJsonObject)) to hoJson
36210>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36211>>>            
36211>>>            If (not(bSuccess)) Begin
36213>>>                Send Destroy of hoJson
36214>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36215>>>                Procedure_Return
36216>>>            End
36216>>>>
36216>>>            
36216>>>            Get JsonToDataType of hoJson to tUsers
36217>>>            Send Destroy of hoJson
36218>>>            
36218>>>            //Filtrar
36218>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36224>>>>
36224>>>                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
36227>>>            Loop
36228>>>>
36228>>>            
36228>>>//            //Order user to use bynary search on tCountries
36228>>>//            //OBS: Binary search make the process slowly because of SortArray
36228>>>//            Move (SortArray(tUsersFiltered, Self, (RefFunc(f_OrderUsersByCountry)))) to tUsersFiltered
36228>>>            
36228>>>            //Incrementar ao país | Inserir país
36228>>>            //Utilizando Binary Search
36228>>>            For iCount from 0 to (SizeOfArray(tUsersFiltered)-1)
36234>>>>
36234>>>                
36234>>>                Move (SearchArray(tUsersFiltered[iCount],tCountries,Self, (RefFunc(f_ComparisonCountry)))) to iIndexCountry
36235>>>                If (iIndexCountry=-1) Begin
36237>>>                    Move (SizeOfArray(tCountries)) to iSizePais
36238>>>                    Move tUsersFiltered[iCount].pais to tCountries[iSizePais].name
36239>>>                    Move 1 to tCountries[iSizePais].total
36240>>>                End
36240>>>>
36240>>>                Else Begin                    
36241>>>                    Increment tCountries[iIndexCountry].total
36242>>>                End                
36242>>>>
36242>>>            Loop
36243>>>>
36243>>>            
36243>>>            Move (SortArray(tCountries, Self, (RefFunc(f_RankingCountries)))) to tCountries
36244>>>            
36244>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36245>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36246>>>            
36246>>>            Move tCountries[0] to tResponse.tCountries[0]
36247>>>            Move tCountries[1] to tResponse.tCountries[1]
36248>>>            Move tCountries[2] to tResponse.tCountries[2]
36249>>>            Move tCountries[3] to tResponse.tCountries[3]
36250>>>            Move tCountries[4] to tResponse.tCountries[4]
36251>>>            
36251>>>            //Parse DataType to Json
36251>>>            Get Create (RefClass(cJsonObject)) to hoJson
36252>>>            Send DataTypeToJson of hoJson tResponse
36253>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36254>>>            Get StringifyUtf8 of hoJson to ucData
36255>>>            Send Destroy of hoJson
36256>>>
36256>>>            Send OutputUChar ucData
36257>>>        End
36257>>>>
36257>>>        Else Begin
36258>>>            Send SetResponseStatus 500 "File not exists" 2
36259>>>        End        
36259>>>>
36259>>>    End_Procedure
36260>>>    
36260>>>End_Object
36261>>>
36261>>>//
36261>>>//Object oTopCountriesOld is a cWebHttpHandler
36261>>>//    
36261>>>//    Set psPath to "top-countries-old"
36261>>>//    Set psVerbs to "GET"
36261>>>//    
36261>>>//    //Aux Functions
36261>>>//    Function f_OrderUsersByCountry stUsers tUser1 stUsers tUser2 Returns Integer
36261>>>//        If (tUser1.pais > tUser2.pais) Function_Return (GT)
36261>>>//        If (tUser1.pais < tUser2.pais) Function_Return (LT)
36261>>>//
36261>>>//        Function_Return (EQ)
36261>>>//    End_Function
36261>>>//    
36261>>>//    Function f_RankingCountries stCountries tCountry1 stCountries tCountry2 Returns Integer
36261>>>//        If (tCountry1.total < tCountry2.total) Function_Return (GT)
36261>>>//        If (tCountry1.total > tCountry2.total) Function_Return (LT)
36261>>>//
36261>>>//        Function_Return (EQ)
36261>>>//    End_Function
36261>>>//    
36261>>>//    Procedure OnHttpGet String sPath String sAcceptType
36261>>>//        TimeSpan tsTimeEnlapse
36261>>>//        DateTime dtInitialTimer
36261>>>//        Integer iChnl iCount iCountCountries iSizePais
36261>>>//        Handle hoJson
36261>>>//        Boolean bSuccess bExists bExistsPais
36261>>>//        stResponseTopCountries tResponse
36261>>>//        stUsers[] tUsers tUsersFiltered
36261>>>//        stCountries[] tCountries tCountriesOrder
36261>>>//        UChar[] ucData ucFile
36261>>>//        
36261>>>//        Move (CurrentDateTime()) to dtInitialTimer
36261>>>//        
36261>>>//        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36261>>>//        Move (sPath + "\Uploads\usuarios.json") to sPath
36261>>>//        
36261>>>//        File_Exist sPath bExists
36261>>>//        
36261>>>//        If (bExists) Begin
36261>>>//            //Ler arquivo JSON
36261>>>//            Move (Seq_New_Channel()) to iChnl
36261>>>//            Direct_Input channel iChnl ("binary:" + sPath)
36261>>>//            Read_Block channel iChnl ucFile -1
36261>>>//            Close_Input channel iChnl
36261>>>//            Send Seq_Release_Channel iChnl
36261>>>//
36261>>>//            //JSON to DataType
36261>>>//            Get Create (RefClass(cJsonObject)) to hoJson
36261>>>//            Get ParseUtf8 of hoJson ucFile to bSuccess
36261>>>//            
36261>>>//            If (not(bSuccess)) Begin
36261>>>//                Send Destroy of hoJson
36261>>>//                Send SetResponseStatus 500 "JSON not loaded" 2
36261>>>//                Procedure_Return
36261>>>//            End
36261>>>//            
36261>>>//            Get JsonToDataType of hoJson to tUsers
36261>>>//            Send Destroy of hoJson
36261>>>//            
36261>>>//            //Filtrar
36261>>>//            For iCount from 0 to (SizeOfArray(tUsers)-1)
36261>>>//                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
36261>>>//            Loop
36261>>>//            
36261>>>//            //Order user to use bynary search on tCountries
36261>>>//            Move (SortArray(tUsersFiltered, Self, (RefFunc(f_OrderUsersByCountry)))) to tUsersFiltered
36261>>>//            
36261>>>//            //Incrementar ao país | Inserir país
36261>>>//            For iCount from 0 to (SizeOfArray(tUsersFiltered)-1)
36261>>>//                Move False to bExistsPais
36261>>>//                
36261>>>//                For iCountCountries from 0 to (SizeOfArray(tCountries)-1)
36261>>>//                    If (tUsersFiltered[iCount].pais = tCountries[iCountCountries].name) Begin
36261>>>//                        Move True to bExistsPais
36261>>>//                        Increment tCountries[iCountCountries].total
36261>>>//                    End
36261>>>//                Loop
36261>>>//                
36261>>>//                If (not(bExistsPais)) Begin
36261>>>//                    Move (SizeOfArray(tCountries)) to iSizePais
36261>>>//                    Move tUsersFiltered[iCount].pais to tCountries[iSizePais].name
36261>>>//                    Move 1 to tCountries[iSizePais].total
36261>>>//                End
36261>>>//            Loop
36261>>>//            
36261>>>//            Move (SortArray(tCountries, Self, (RefFunc(f_RankingCountries)))) to tCountries
36261>>>//            
36261>>>//            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36261>>>//            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36261>>>//            
36261>>>//            Move tCountries[0] to tResponse.tCountries[0]
36261>>>//            Move tCountries[1] to tResponse.tCountries[1]
36261>>>//            Move tCountries[2] to tResponse.tCountries[2]
36261>>>//            Move tCountries[3] to tResponse.tCountries[3]
36261>>>//            Move tCountries[4] to tResponse.tCountries[4]
36261>>>//            
36261>>>//            //Parse DataType to Json
36261>>>//            Get Create (RefClass(cJsonObject)) to hoJson
36261>>>//            Send DataTypeToJson of hoJson tResponse
36261>>>//            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36261>>>//            Get StringifyUtf8 of hoJson to ucData
36261>>>//            Send Destroy of hoJson
36261>>>//
36261>>>//            Send OutputUChar ucData
36261>>>//        End
36261>>>//        Else Begin
36261>>>//            Send SetResponseStatus 500 "File not exists" 2
36261>>>//        End        
36261>>>//    End_Procedure
36261>>>//    
36261>>>//End_Object
36261>    Use src\routes\TeamInsights.wo
Including file: src\routes\TeamInsights.wo    (E:\Sistema\Codecon\AppSrc\src\routes\TeamInsights.wo)
36261>>>Use cWebHttpHandler.pkg
36261>>>
36261>>>Struct stTeamProjects
36261>>>    String nome
36261>>>    Boolean concluido
36261>>>End_Struct
36261>>>
36261>>>Struct stTeamInsights
36261>>>    String name
36261>>>    Integer iTotalMembers
36261>>>    Integer iTotalActiveMembers
36261>>>    Integer iTotalLeaders
36261>>>    Integer iTotalProjects
36261>>>    Integer iTotalProjectsCompleted
36261>>>    Number nTotalActiveMembers
36261>>>End_Struct
36261>>>
36261>>>Struct stResponseTeamInsights
36261>>>    Integer iTimeEnlapse
36261>>>    stTeamInsights[] tTeam
36261>>>    stTeamInsights[] tTeam
36261>>>End_Struct
36261>>>
36261>>>Object oTeamInsights is a cWebHttpHandler
36263>>>    
36263>>>    Set psPath to "team-insights"
36264>>>    Set psVerbs to "GET"
36265>>>    
36265>>>    //Aux Functions
36265>>>    Function f_ComparisonTeam stTeamInsights tTeam stUsers tUser Returns Integer
36268>>>        If (tUser.equipe.nome < tTeam.name) Function_Return (GT)
36271>>>        If (tUser.equipe.nome > tTeam.name) Function_Return (LT)
36274>>>
36274>>>        Function_Return (EQ)
36275>>>    End_Function
36276>>>    
36276>>>    //Http
36276>>>    Procedure OnHttpGet String sPath String sAcceptType
36279>>>        TimeSpan tsTimeEnlapse
36279>>>        DateTime dtInitialTimer
36279>>>        Integer iChnl iCount iCountTeam iSizeTeam iCountProjetos iIndexTeam
36279>>>        Handle hoJson
36279>>>        Boolean bSuccess bExists bExistsTeam
36279>>>        stResponseTeamInsights tResponse
36279>>>        stResponseTeamInsights tResponse
36279>>>        stUsers[] tUsers tUsersFiltered
36279>>>        stUsers[] tUsers tUsersFiltered
36281>>>        stTeamInsights[] tTeam
36281>>>        stTeamInsights[] tTeam
36282>>>        UChar[] ucData ucFile
36284>>>        
36284>>>        Move (CurrentDateTime()) to dtInitialTimer
36285>>>        
36285>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36286>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36287>>>        
36287>>>        File_Exist sPath bExists
36288>>>        
36288>>>        If (bExists) Begin
36290>>>            //Ler arquivo JSON
36290>>>            Move (Seq_New_Channel()) to iChnl
36291>>>            Direct_Input channel iChnl ("binary:" + sPath)
36293>>>            Read_Block channel iChnl ucFile -1
36295>>>            Close_Input channel iChnl
36297>>>            Send Seq_Release_Channel iChnl
36298>>>
36298>>>            //JSON to DataType
36298>>>            Get Create (RefClass(cJsonObject)) to hoJson
36299>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36300>>>            
36300>>>            If (not(bSuccess)) Begin
36302>>>                Send Destroy of hoJson
36303>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36304>>>                Procedure_Return
36305>>>            End
36305>>>>
36305>>>            
36305>>>            Get JsonToDataType of hoJson to tUsers
36306>>>            Send Destroy of hoJson
36307>>>            
36307>>>            //Filtrar
36307>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36313>>>>
36313>>>                
36313>>>                Move (SearchArray(tUsers[iCount],tTeam,Self, (RefFunc(f_ComparisonTeam)))) to iIndexTeam
36314>>>                If (iIndexTeam=-1) Begin
36316>>>                    Move (SizeOfArray(tTeam)) to iIndexTeam
36317>>>                    
36317>>>                    Move tUsers[iCount].equipe.nome to tTeam[iIndexTeam].name
36318>>>                    
36318>>>                    If (tUsers[iCount].equipe.lider=True) Move 1 to tTeam[iIndexTeam].iTotalLeaders
36321>>>                    If (tUsers[iCount].ativo=True) Move 1 to tTeam[iIndexTeam].iTotalActiveMembers
36324>>>                    
36324>>>                    For iCountProjetos from 0 to (SizeOfArray(tUsers[iCount].equipe.projetos)-1)
36330>>>>
36330>>>                        If (tTeam[iIndexTeam].iTotalProjectsCompleted=0 and tUsers[iCount].equipe.projetos[iCountProjetos].concluido=True) Move 1 to tTeam[iIndexTeam].iTotalProjectsCompleted
36333>>>                        Else If (tUsers[iCount].equipe.projetos[iCountProjetos].concluido=True) Increment tTeam[iIndexTeam].iTotalProjectsCompleted
36337>>>                        
36337>>>                        If (tTeam[iIndexTeam].iTotalProjects=0) Move 1 to tTeam[iIndexTeam].iTotalProjects
36340>>>                        Else Increment tTeam[iIndexTeam].iTotalProjects
36342>>>                    Loop
36343>>>>
36343>>>                                        
36343>>>                    Move 1 to tTeam[iIndexTeam].iTotalMembers
36344>>>                End
36344>>>>
36344>>>                Else Begin                                            
36345>>>                    If (tUsers[iCount].equipe.lider=True) Increment tTeam[iIndexTeam].iTotalLeaders
36348>>>                    If (tUsers[iCount].ativo=True) Increment tTeam[iIndexTeam].iTotalActiveMembers
36351>>>                    
36351>>>                    For iCountProjetos from 0 to (SizeOfArray(tUsers[iCount].equipe.projetos)-1)
36357>>>>
36357>>>                        If (tUsers[iCount].equipe.projetos[iCountProjetos].concluido) Increment tTeam[iIndexTeam].iTotalProjectsCompleted
36360>>>                        Increment tTeam[iIndexTeam].iTotalProjects
36361>>>                    Loop
36362>>>>
36362>>>                    
36362>>>                    Increment tTeam[iIndexTeam].iTotalMembers
36363>>>                End             
36363>>>>
36363>>>                
36363>>>            Loop
36364>>>>
36364>>>            
36364>>>            For iCountTeam from 0 to (SizeOfArray(tTeam)-1)
36370>>>>
36370>>>                Move (FormatNumber((Number(tTeam[iCountTeam].iTotalActiveMembers)/Number(tTeam[iCountTeam].iTotalMembers))*100.00,2)) to tTeam[iCountTeam].nTotalActiveMembers
36371>>>            Loop
36372>>>>
36372>>>            
36372>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36373>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36374>>>            Move tTeam to tResponse.tTeam
36375>>>            
36375>>>            //Parse DataType to Json
36375>>>            Get Create (RefClass(cJsonObject)) to hoJson
36376>>>            Send DataTypeToJson of hoJson tResponse
36377>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36378>>>            Get StringifyUtf8 of hoJson to ucData
36379>>>            Send Destroy of hoJson
36380>>>
36380>>>            Send OutputUChar ucData
36381>>>        End
36381>>>>
36381>>>        Else Begin
36382>>>            Send SetResponseStatus 500 "File not exists" 2
36383>>>        End        
36383>>>>
36383>>>    End_Procedure
36384>>>    
36384>>>End_Object
36385>    Use src\routes\ActiveUsersPerDay.wo
Including file: src\routes\ActiveUsersPerDay.wo    (E:\Sistema\Codecon\AppSrc\src\routes\ActiveUsersPerDay.wo)
36385>>>Use cWebHttpHandler.pkg
36385>>>
36385>>>Struct stActiveUsersPerDay
36385>>>    Date data
36385>>>    Integer iTotal
36385>>>End_Struct
36385>>>
36385>>>Struct stResponseActiveUsersPerDay
36385>>>    Integer iTimeEnlapse
36385>>>    stActiveUsersPerDay[] tLogins
36385>>>    stActiveUsersPerDay[] tLogins
36385>>>End_Struct
36385>>>
36385>>>Object oActiveUsersPerDay is a cWebHttpHandler
36387>>>    
36387>>>    Set psPath to "active-users-per-day"
36388>>>    Set psVerbs to "GET"
36389>>>    
36389>>>    //Aux Functions
36389>>>    Function f_ComparisonLog stActiveUsersPerDay tLogins stLogs tLog Returns Integer
36392>>>        If (tLog.data < tLogins.data) Function_Return (GT)
36395>>>        If (tLog.data > tLogins.data) Function_Return (LT)
36398>>>
36398>>>        Function_Return (EQ)
36399>>>    End_Function
36400>>>    
36400>>>    //Http
36400>>>    Procedure OnHttpGet String sPath String sAcceptType
36403>>>        TimeSpan tsTimeEnlapse
36403>>>        DateTime dtInitialTimer
36403>>>        Integer iChnl iCount iCountLog iIndexLog
36403>>>        Handle hoJson
36403>>>        Boolean bSuccess bExists bExistsTeam
36403>>>        stResponseActiveUsersPerDay tResponse
36403>>>        stResponseActiveUsersPerDay tResponse
36403>>>        stUsers[] tUsers tUsersFiltered
36403>>>        stUsers[] tUsers tUsersFiltered
36405>>>        stActiveUsersPerDay[] tLogins
36405>>>        stActiveUsersPerDay[] tLogins
36406>>>        UChar[] ucData ucFile
36408>>>        
36408>>>        Move (CurrentDateTime()) to dtInitialTimer
36409>>>        
36409>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36410>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36411>>>        
36411>>>        File_Exist sPath bExists
36412>>>        
36412>>>        If (bExists) Begin
36414>>>            //Ler arquivo JSON
36414>>>            Move (Seq_New_Channel()) to iChnl
36415>>>            Direct_Input channel iChnl ("binary:" + sPath)
36417>>>            Read_Block channel iChnl ucFile -1
36419>>>            Close_Input channel iChnl
36421>>>            Send Seq_Release_Channel iChnl
36422>>>
36422>>>            //JSON to DataType
36422>>>            Get Create (RefClass(cJsonObject)) to hoJson
36423>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36424>>>            
36424>>>            If (not(bSuccess)) Begin
36426>>>                Send Destroy of hoJson
36427>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36428>>>                Procedure_Return
36429>>>            End
36429>>>>
36429>>>            
36429>>>            Get JsonToDataType of hoJson to tUsers
36430>>>            Send Destroy of hoJson
36431>>>            
36431>>>            //Filtrar
36431>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36437>>>>
36437>>>                For iCountLog from 0 to (SizeOfArray(tUsers[iCount].logs)-1)
36443>>>>
36443>>>                    Move (SearchArray(tUsers[iCount].logs[iCountLog],tLogins,Self, (RefFunc(f_ComparisonLog)))) to iIndexLog
36444>>>                    If (iIndexLog=-1) Begin
36446>>>                        Move (SizeOfArray(tLogins)) to iIndexLog
36447>>>                        If (tUsers[iCount].logs[iCountLog].acao="login") Begin
36449>>>                            Move tUsers[iCount].logs[iCountLog].data to tLogins[iIndexLog].data
36450>>>                            Increment tLogins[iIndexLog].iTotal
36451>>>                        End
36451>>>>
36451>>>                    End
36451>>>>
36451>>>                    Else Begin
36452>>>                        Increment tLogins[iIndexLog].iTotal                                      
36453>>>                    End                    
36453>>>>
36453>>>                Loop                
36454>>>>
36454>>>            Loop
36455>>>>
36455>>>            
36455>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36456>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36457>>>            Move tLogins to tResponse.tLogins
36458>>>            
36458>>>            //Parse DataType to Json
36458>>>            Get Create (RefClass(cJsonObject)) to hoJson
36459>>>            Send DataTypeToJson of hoJson tResponse
36460>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36461>>>            Get StringifyUtf8 of hoJson to ucData
36462>>>            Send Destroy of hoJson
36463>>>
36463>>>            Send OutputUChar ucData
36464>>>        End
36464>>>>
36464>>>        Else Begin
36465>>>            Send SetResponseStatus 500 "File not exists" 2
36466>>>        End        
36466>>>>
36466>>>    End_Procedure
36467>>>    
36467>>>End_Object
36468>    
36468>End_Object
36469>
36469>Send StartWebApp of oWebApp
36470>
Summary
Memory Available: 48502005760
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 24687
Total Resources: 0
Total Commands : 36469
Total Windows  : 0
Total Pages    : 0
Static Data    : 457259
Message area   : 238094
Total Blocks   : 16373
