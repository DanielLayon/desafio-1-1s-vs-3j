Compiling Program: E:\Sistema\Codecon\AppSrc\WebApp.src
Memory Available: 50500476928
1>Use AllWebAppClasses.pkg
Using pre-compiled package ALLWEBAPPCLASSES.PKG
Including file: AllWebAppClasses.x64.pkd    (C:\Program Files\DataFlex 24.0\Pkg\AllWebAppClasses.x64.pkd)
36017>Use cConnection.pkg
36017>
36017>Struct stLogs
36017>    Date data
36017>    String acao
36017>End_Struct
36017>
36017>Struct stProjects
36017>    String nome
36017>    Boolean concluido
36017>End_Struct
36017>
36017>Struct stTeam
36017>    String nome
36017>    Boolean lider
36017>    stProjects[] projetos
36017>    stProjects[] projetos
36017>End_Struct
36017>
36017>Struct stUsers
36017>    String id
36017>    String nome
36017>    Integer idade
36017>    Integer score
36017>    Boolean ativo
36017>    String pais
36017>    stTeam equipe
36017>    stTeam equipe
36017>    stLogs[] logs
36017>    stLogs[] logs
36017>End_Struct
36017>
36017>Object oApplication is a cApplication
36019>
36019>    Object oConnection is a cConnection
36021>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\LoginEncryption.pkg)
36021>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 24.0\Pkg\cLoginEncryption.pkg)
36021>>>>>Use cCryptographerEx.pkg
36021>>>>>
36021>>>>>Class cLoginEncryption is a cObject
36022>>>>>    
36022>>>>>    Procedure Construct_Object
36024>>>>>        Forward Send Construct_Object
36026>>>>>        // this must be set to a multi (40ish) character random key
36026>>>>>        Property String psEncryptPassword ""
36027>>>>>        
36027>>>>>        Object oDataCrypter is a cCryptographerEx
36029>>>>>            Set piHash to CALG_SHA_256
36030>>>>>            Set piCipher to CALG_AES_256
36031>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
36032>>>>>            Set piProvider to PROV_RSA_AES
36033>>>>>        End_Object
36034>>>>>    End_Procedure
36035>>>>>    
36035>>>>>    // This can be augmented to return a password encryption key using any
36035>>>>>    // hidden mechanism desired.
36035>>>>>    Function GetEncryptionPassword Returns String
36037>>>>>        String sPassword
36037>>>>>        Get psEncryptPassword to sPassword
36038>>>>>        Function_Return sPassword
36039>>>>>    End_Function
36040>>>>>    
36040>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
36040>>>>>    //
36040>>>>>    // Params:
36040>>>>>    //   sPlainText     String to encrypt.
36040>>>>>    // Returns:
36040>>>>>    //   Base64 encoded hash.
36040>>>>>    Function EncryptPassword String sPlainText Returns String
36042>>>>>        String sEncryptPassword sBase64
36042>>>>>        UChar[] ucBinary
36043>>>>>        Pointer pBase64
36043>>>>>        Integer iVoid
36043>>>>>        
36043>>>>>        //  Encrypt Key
36043>>>>>        Get GetEncryptionPassword to sEncryptPassword
36044>>>>>        If (sEncryptPassword = "") Begin
36046>>>>>            Error DFERR_PROGRAM "No encryption password set"
36047>>>>>>
36047>>>>>        End
36047>>>>>>
36047>>>>>        
36047>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
36048>>>>>        
36048>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
36050>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
36051>>>>>>
36051>>>>>            Function_Return ""
36052>>>>>        End
36052>>>>>>
36052>>>>>        
36052>>>>>        //  Encode binary hash to Base64
36052>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
36053>>>>>        Move (PointerToString(pBase64)) to sBase64
36054>>>>>        Move (Free(pBase64)) to iVoid
36055>>>>>        
36055>>>>>        Function_Return sBase64
36056>>>>>    End_Function
36057>>>>>    
36057>>>>>    
36057>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
36057>>>>>    //
36057>>>>>    // Params:
36057>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
36057>>>>>    // Returns:
36057>>>>>    //   Readable plain text password
36057>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
36059>>>>>        String sEncryptPassword
36059>>>>>        UChar[] ucBinary ucPlain
36061>>>>>        Boolean bIsHex
36061>>>>>        Integer iLen iVoid
36061>>>>>        Pointer pBinary
36061>>>>>        
36061>>>>>        If (sBase64EncryptedPassword <> "") Begin
36063>>>>>            //  Decode from Base64
36063>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
36064>>>>>            
36064>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
36065>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
36066>>>>>                        
36066>>>>>            Move (Free(pBinary)) to iVoid
36067>>>>>            
36067>>>>>            //  Encrypted binary hash to string
36067>>>>>            Get GetEncryptionPassword to sEncryptPassword
36068>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
36069>>>>>        End
36069>>>>>>
36069>>>>>        
36069>>>>>        Function_Return (UCharArrayToString(ucPlain))
36070>>>>>    End_Function
36071>>>>>End_Class
36072>>>
36072>>>Object oLoginEncryption is a cLoginEncryption
36074>>>
36074>>>    // this must be created in your appsrc directory and must contain an encryption
36074>>>    // key that is set to psEncryptPassword. It will look something like this
36074>>>    //
36074>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
36074>>>    //  
Including file: LoginEncryptionKey.inc    (E:\Sistema\Codecon\AppSrc\LoginEncryptionKey.inc)
36074>>>>// Studio generated login encryption key
36074>>>>Set psEncryptPassword to "Zzw+$OIc]18VsP(T2([F=}y()yDh#:W)(RJ[dK/R"
36075>>>>
36075>>>    
36075>>>    // use this to register this object to your cConnection Object. This object
36075>>>    // must be created after the cConnection object
36075>>>    Move Self to ghoLoginEncryption
36076>>>End_Object
36077>    End_Object
36078>
36078>End_Object
36079>
36079>Object oWebApp is a cWebAppBasic
36081>    Use Users.wo
Including file: Users.wo    (E:\Sistema\Codecon\AppSrc\Users.wo)
36081>>>Use cWebHttpMultipartFormDataHandler.pkg
36081>>>
36081>>>Struct stResponseUsers
36081>>>    Integer iTimeEnlapse
36081>>>    String sMessage
36081>>>End_Struct
36081>>>
36081>>>Object oUsers is a cWebHttpMultipartFormdataHandler
36083>>>    
36083>>>    Set psPath to "users"
36084>>>    Set psVerbs to "POST"
36085>>>
36085>>>    Property Integer piOutChannel -1
36087>>>        
36087>>>    Procedure OnHttpPost String sPath String sContentType String sAcceptType Integer iSize
36090>>>        TimeSpan tsTimeEnlapse
36090>>>        DateTime dtInitialTimer
36090>>>        Boolean bSuccess
36090>>>        Handle hoJson
36090>>>        UChar[] ucData
36091>>>        stResponseUsers tResponse
36091>>>        stResponseUsers tResponse
36091>>>        
36091>>>        Move (CurrentDateTime()) to dtInitialTimer
36092>>>        Get ParseMultipartFormData to bSuccess
36093>>>        
36093>>>        If (bSuccess) Begin
36095>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36096>>>            
36096>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36097>>>            Move "Succesfully written file!" to tResponse.sMessage
36098>>>            
36098>>>            Get Create (RefClass(cJsonObject)) to hoJson
36099>>>            Send DataTypeToJson of hoJson tResponse
36100>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36101>>>            Get StringifyUtf8 of hoJson to ucData
36102>>>
36102>>>            
36102>>>            Send OutputUChar ucData
36103>>>        End
36103>>>>
36103>>>    End_Procedure
36104>>>    
36104>>>    Procedure OnFileStart String sFieldName String sFileName String sContentType Boolean  ByRef bAbort
36107>>>        String sPath
36107>>>        Boolean bExists
36107>>>        Integer iChnl
36107>>>        
36107>>>        //  Open a file for writing
36107>>>        If (sFieldName = "file") Begin
36109>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36110>>>            Move (sPath + "\Uploads\usuarios.json") to sPath
36111>>>            
36111>>>            File_Exist sPath bExists
36112>>>            
36112>>>            If (not(bExists)) Begin
36114>>>                Move (Seq_New_Channel()) to iChnl
36115>>>                Direct_Output channel iChnl ("binary:" + sPath)
36117>>>                Set piOutChannel to iChnl
36118>>>            End
36118>>>>
36118>>>            Else Begin
36119>>>                Send SetResponseStatus 500 "File already exists" 4
36120>>>                Move True to bAbort
36121>>>            End
36121>>>>
36121>>>        End     
36121>>>>
36121>>>        Else Begin
36122>>>            Send SetResponseStatus 400 "Invalid Field" 5
36123>>>            Move True to bAbort
36124>>>        End
36124>>>>
36124>>>    End_Procedure
36125>>>
36125>>>    Procedure OnFileChunk String sFieldName UChar[]  ByRef ucData
36128>>>        Integer iChnl
36128>>>        
36128>>>        //  Write the chunks to the opened file
36128>>>        If (sFieldName = "file") Begin
36130>>>            Get piOutChannel to iChnl
36131>>>            If (iChnl >= 0) Begin
36133>>>                Write channel iChnl ucData
36135>>>            End
36135>>>>
36135>>>        End
36135>>>>
36135>>>    End_Procedure
36136>>>    
36136>>>    Procedure OnFileFinished String sFieldName
36139>>>        Integer iChnl
36139>>>        
36139>>>        //  Close when finished
36139>>>        If (sFieldName = "file") Begin
36141>>>            Get piOutChannel to iChnl
36142>>>            If (iChnl >= 0) Begin
36144>>>                Close_Output channel iChnl
36146>>>                Send Seq_Release_Channel iChnl
36147>>>                
36147>>>                Set piOutChannel to -1
36148>>>            End
36148>>>>
36148>>>        End
36148>>>>
36148>>>    End_Procedure
36149>>>End_Object
36150>    Use SuperUsers.wo
Including file: SuperUsers.wo    (E:\Sistema\Codecon\AppSrc\SuperUsers.wo)
36150>>>Use cWebHttpHandler.pkg
36150>>>
36150>>>Struct stResponseSuperusers
36150>>>    Integer iTimeEnlapse
36150>>>    stUsers[] tUsers
36150>>>    stUsers[] tUsers
36150>>>End_Struct
36150>>>
36150>>>Object oSuperUsers is a cWebHttpHandler
36152>>>    
36152>>>    Set psPath to "superusers"
36153>>>    Set psVerbs to "GET"
36154>>>
36154>>>    Procedure OnHttpGet String sPath String sAcceptType
36157>>>        TimeSpan tsTimeEnlapse
36157>>>        DateTime dtInitialTimer
36157>>>        Integer iChnl iCount
36157>>>        Handle hoJson
36157>>>        Boolean bSuccess bExists
36157>>>        stResponseSuperusers tResponse
36157>>>        stResponseSuperusers tResponse
36157>>>        stUsers[] tUsers tUsersFiltered
36157>>>        stUsers[] tUsers tUsersFiltered
36159>>>        UChar[] ucData ucFile
36161>>>        
36161>>>        Move (CurrentDateTime()) to dtInitialTimer
36162>>>        
36162>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36163>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36164>>>        
36164>>>        File_Exist sPath bExists
36165>>>        
36165>>>        If (bExists) Begin
36167>>>            //Ler arquivo JSON
36167>>>            Move (Seq_New_Channel()) to iChnl
36168>>>            Direct_Input channel iChnl ("binary:" + sPath)
36170>>>            Read_Block channel iChnl ucFile -1
36172>>>            Close_Input channel iChnl
36174>>>            Send Seq_Release_Channel iChnl
36175>>>
36175>>>            //JSON to DataType
36175>>>            Get Create (RefClass(cJsonObject)) to hoJson
36176>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36177>>>            
36177>>>            If (not(bSuccess)) Begin
36179>>>                Send Destroy of hoJson
36180>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36181>>>                Procedure_Return
36182>>>            End
36182>>>>
36182>>>            
36182>>>            Get JsonToDataType of hoJson to tUsers
36183>>>            Send Destroy of hoJson
36184>>>            
36184>>>            //Filtrar
36184>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36190>>>>
36190>>>                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
36193>>>            Loop
36194>>>>
36194>>>            
36194>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36195>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36196>>>            Move tUsersFiltered to tResponse.tUsers
36197>>>            
36197>>>            //Parse DataType to Json
36197>>>            Get Create (RefClass(cJsonObject)) to hoJson
36198>>>            Send DataTypeToJson of hoJson tResponse
36199>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36200>>>            Get StringifyUtf8 of hoJson to ucData
36201>>>            Send Destroy of hoJson
36202>>>
36202>>>            Send OutputUChar ucData
36203>>>        End
36203>>>>
36203>>>        Else Begin
36204>>>            Send SetResponseStatus 500 "File not exists" 2
36205>>>        End        
36205>>>>
36205>>>    End_Procedure
36206>>>    
36206>>>End_Object
36207>    Use TopCountries.wo
Including file: TopCountries.wo    (E:\Sistema\Codecon\AppSrc\TopCountries.wo)
36207>>>Use cWebHttpHandler.pkg
36207>>>
36207>>>Struct stCountries
36207>>>    String nome
36207>>>    Integer total
36207>>>End_Struct
36207>>>
36207>>>Struct stResponseTopCountries
36207>>>    Integer iTimeEnlapse
36207>>>    stCountries[] tCountries
36207>>>    stCountries[] tCountries
36207>>>End_Struct
36207>>>
36207>>>Object oTopCountries is a cWebHttpHandler
36209>>>    
36209>>>    Set psPath to "top-countries"
36210>>>    Set psVerbs to "GET"
36211>>>
36211>>>    Procedure OnHttpGet String sPath String sAcceptType
36214>>>        TimeSpan tsTimeEnlapse
36214>>>        DateTime dtInitialTimer
36214>>>        Integer iChnl iCount iCountPais iSizePais
36214>>>        Handle hoJson
36214>>>        Boolean bSuccess bExists bExistsPais
36214>>>        stResponseTopCountries tResponse
36214>>>        stResponseTopCountries tResponse
36214>>>        stUsers[] tUsers tUsersFiltered
36214>>>        stUsers[] tUsers tUsersFiltered
36216>>>        stCountries[] tPais tPaisOrder
36216>>>        stCountries[] tPais tPaisOrder
36218>>>        UChar[] ucData ucFile
36220>>>        
36220>>>        Move (CurrentDateTime()) to dtInitialTimer
36221>>>        
36221>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36222>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36223>>>        
36223>>>        File_Exist sPath bExists
36224>>>        
36224>>>        If (bExists) Begin
36226>>>            //Ler arquivo JSON
36226>>>            Move (Seq_New_Channel()) to iChnl
36227>>>            Direct_Input channel iChnl ("binary:" + sPath)
36229>>>            Read_Block channel iChnl ucFile -1
36231>>>            Close_Input channel iChnl
36233>>>            Send Seq_Release_Channel iChnl
36234>>>
36234>>>            //JSON to DataType
36234>>>            Get Create (RefClass(cJsonObject)) to hoJson
36235>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36236>>>            
36236>>>            If (not(bSuccess)) Begin
36238>>>                Send Destroy of hoJson
36239>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36240>>>                Procedure_Return
36241>>>            End
36241>>>>
36241>>>            
36241>>>            Get JsonToDataType of hoJson to tUsers
36242>>>            Send Destroy of hoJson
36243>>>            
36243>>>            //Filtrar
36243>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36249>>>>
36249>>>                If (tUsers[iCount].score>=900 and tUsers[iCount].ativo=True) Move tUsers[iCount] to tUsersFiltered[SizeOfArray(tUsersFiltered)]
36252>>>            Loop
36253>>>>
36253>>>            
36253>>>            For iCount from 0 to (SizeOfArray(tUsersFiltered)-1)
36259>>>>
36259>>>                Move False to bExistsPais
36260>>>                
36260>>>                For iCountPais from 0 to (SizeOfArray(tPais)-1)
36266>>>>
36266>>>                    If (tUsersFiltered[iCount].pais = tPais[iCountPais].nome) Begin
36268>>>                        Move True to bExistsPais
36269>>>                        Increment tPais[iCountPais].total
36270>>>                    End
36270>>>>
36270>>>                Loop
36271>>>>
36271>>>                
36271>>>                If (not(bExistsPais)) Begin
36273>>>                    Move (SizeOfArray(tPais)) to iSizePais
36274>>>                    Move tUsersFiltered[iCount].pais to tPais[iSizePais].nome
36275>>>                    Move 1 to tPais[iSizePais].total
36276>>>                End
36276>>>>
36276>>>            Loop
36277>>>>
36277>>>            
36277>>>            
36277>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36278>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36279>>>            Move tPais to tResponse.tCountries
36280>>>            
36280>>>            //Parse DataType to Json
36280>>>            Get Create (RefClass(cJsonObject)) to hoJson
36281>>>            Send DataTypeToJson of hoJson tResponse
36282>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36283>>>            Get StringifyUtf8 of hoJson to ucData
36284>>>            Send Destroy of hoJson
36285>>>
36285>>>            Send OutputUChar ucData
36286>>>        End
36286>>>>
36286>>>        Else Begin
36287>>>            Send SetResponseStatus 500 "File not exists" 2
36288>>>        End        
36288>>>>
36288>>>    End_Procedure
36289>>>    
36289>>>End_Object
36290>    Use TeamInsights.wo
Including file: TeamInsights.wo    (E:\Sistema\Codecon\AppSrc\TeamInsights.wo)
36290>>>Use cWebHttpHandler.pkg
36290>>>
36290>>>Struct stTeamProjects
36290>>>    String nome
36290>>>    Boolean concluido
36290>>>End_Struct
36290>>>
36290>>>Struct stTeamLeader
36290>>>    String nome
36290>>>End_Struct
36290>>>
36290>>>Struct stTeamInsights
36290>>>    String nome
36290>>>    stTeamLeader[] lideres
36290>>>    stTeamLeader[] lideres
36290>>>    Integer totalProjetos
36290>>>    Integer totalConcluidos
36290>>>    Integer totalMembros
36290>>>    Integer membrosAtivos
36290>>>    Number membrosAtivosPorcentagem
36290>>>End_Struct
36290>>>
36290>>>Struct stResponseTeamInsights
36290>>>    Integer iTimeEnlapse
36290>>>    stTeamInsights[] tTeam
36290>>>    stTeamInsights[] tTeam
36290>>>End_Struct
36290>>>
36290>>>Object oTeamInsights is a cWebHttpHandler
36292>>>    
36292>>>    Set psPath to "team-insights"
36293>>>    Set psVerbs to "GET"
36294>>>
36294>>>    Procedure OnHttpGet String sPath String sAcceptType
36297>>>        TimeSpan tsTimeEnlapse
36297>>>        DateTime dtInitialTimer
36297>>>        Integer iChnl iCount iCountTeam iSizeTeam iCountProjetos
36297>>>        Handle hoJson
36297>>>        Boolean bSuccess bExists bExistsTeam
36297>>>        stResponseTeamInsights tResponse
36297>>>        stResponseTeamInsights tResponse
36297>>>        stUsers[] tUsers tUsersFiltered
36297>>>        stUsers[] tUsers tUsersFiltered
36299>>>        stTeamInsights[] tTeam
36299>>>        stTeamInsights[] tTeam
36300>>>        UChar[] ucData ucFile
36302>>>        
36302>>>        Move (CurrentDateTime()) to dtInitialTimer
36303>>>        
36303>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
36304>>>        Move (sPath + "\Uploads\usuarios.json") to sPath
36305>>>        
36305>>>        File_Exist sPath bExists
36306>>>        
36306>>>        If (bExists) Begin
36308>>>            //Ler arquivo JSON
36308>>>            Move (Seq_New_Channel()) to iChnl
36309>>>            Direct_Input channel iChnl ("binary:" + sPath)
36311>>>            Read_Block channel iChnl ucFile -1
36313>>>            Close_Input channel iChnl
36315>>>            Send Seq_Release_Channel iChnl
36316>>>
36316>>>            //JSON to DataType
36316>>>            Get Create (RefClass(cJsonObject)) to hoJson
36317>>>            Get ParseUtf8 of hoJson ucFile to bSuccess
36318>>>            
36318>>>            If (not(bSuccess)) Begin
36320>>>                Send Destroy of hoJson
36321>>>                Send SetResponseStatus 500 "JSON not loaded" 2
36322>>>                Procedure_Return
36323>>>            End
36323>>>>
36323>>>            
36323>>>            Get JsonToDataType of hoJson to tUsers
36324>>>            Send Destroy of hoJson
36325>>>            
36325>>>            //Filtrar
36325>>>            For iCount from 0 to (SizeOfArray(tUsers)-1)
36331>>>>
36331>>>                For iCountTeam from 0 to (SizeOfArray(tTeam)-1)
36337>>>>
36337>>>                    If (tUsers[iCount].equipe.nome = tTeam[iCountTeam].nome) Begin
36339>>>                        Move True to bExistsTeam
36340>>>                        
36340>>>                        If (tUsers[iCount].equipe.lider=True) Move tUsers[iCount].nome to tTeam[iCountTeam].lideres[SizeOfArray(tTeam[iCountTeam].lideres)].nome
36343>>>                        If (tUsers[iCount].ativo=True) Increment tTeam[iCountTeam].membrosAtivos
36346>>>                        
36346>>>                        For iCountProjetos from 0 to (SizeOfArray(tUsers[iCount].equipe.projetos)-1)
36352>>>>
36352>>>                            If (tUsers[iCount].equipe.projetos[iCountProjetos].concluido) Increment tTeam[iCountTeam].totalConcluidos
36355>>>                            Increment tTeam[iCountTeam].totalProjetos
36356>>>                        Loop
36357>>>>
36357>>>                        
36357>>>                        If (tUsers[iCount].ativo=True) Increment tTeam[iCountTeam].totalConcluidos
36360>>>                        
36360>>>                        Increment tTeam[iCountTeam].totalMembros
36361>>>                    End
36361>>>>
36361>>>                Loop
36362>>>>
36362>>>                
36362>>>                If (not(bExistsTeam)) Begin
36364>>>                    Move (SizeOfArray(tTeam)) to iCountTeam
36365>>>                    
36365>>>                    If (tUsers[iCount].equipe.lider=True) Move tUsers[iCount].nome to tTeam[iCountTeam].lideres[SizeOfArray(tTeam[iCountTeam].lideres)].nome
36368>>>                    If (tUsers[iCount].ativo=True) Move 1 to tTeam[iCountTeam].membrosAtivos
36371>>>                    
36371>>>                    For iCountProjetos from 0 to (SizeOfArray(tUsers[iCount].equipe.projetos)-1)
36377>>>>
36377>>>                        If (tUsers[iCount].equipe.projetos[iCountProjetos].concluido) Move 1 to tTeam[iCountTeam].totalConcluidos
36380>>>                        Move 1 to tTeam[iCountTeam].totalProjetos
36381>>>                    Loop
36382>>>>
36382>>>                    
36382>>>                    If (tUsers[iCount].ativo=True) Increment tTeam[iCountTeam].totalConcluidos
36385>>>                    
36385>>>                    Move 1 to tTeam[iCountTeam].totalMembros
36386>>>                End                
36386>>>>
36386>>>            Loop
36387>>>>
36387>>>            
36387>>>            For iCountTeam from 0 to (SizeOfArray(tTeam)-1)
36393>>>>
36393>>>                Move (tTeam[iCountTeam].totalMembros/tTeam[iCountTeam].membrosAtivos) to tTeam[iCountTeam].membrosAtivosPorcentagem
36394>>>            Loop
36395>>>>
36395>>>            
36395>>>            
36395>>>            
36395>>>            Move (CurrentDateTime()-dtInitialTimer) to tsTimeEnlapse
36396>>>            Move (SpanTotalMilliseconds(tsTimeEnlapse)) to tResponse.iTimeEnlapse
36397>>>            Move tTeam to tResponse.tTeam
36398>>>            
36398>>>            //Parse DataType to Json
36398>>>            Get Create (RefClass(cJsonObject)) to hoJson
36399>>>            Send DataTypeToJson of hoJson tResponse
36400>>>            Set peWhiteSpace of hoJson to jpWhitespace_Spaced
36401>>>            Get StringifyUtf8 of hoJson to ucData
36402>>>            Send Destroy of hoJson
36403>>>
36403>>>            Send OutputUChar ucData
36404>>>        End
36404>>>>
36404>>>        Else Begin
36405>>>            Send SetResponseStatus 500 "File not exists" 2
36406>>>        End        
36406>>>>
36406>>>    End_Procedure
36407>>>    
36407>>>End_Object
36408>    
36408>End_Object
36409>
36409>Send StartWebApp of oWebApp
36410>
Summary
Memory Available: 50497069056
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 24677
Total Resources: 0
Total Commands : 36409
Total Windows  : 0
Total Pages    : 0
Static Data    : 455395
Message area   : 238066
Total Blocks   : 16347
